<?php
// $Id: uc_credit.module,v 1.4.2.3 2008/01/25 22:19:29 rszrama Exp $

/**
 * @file
 * Defines the credit card payment method and hooks in payment gateways.
 *
 * Development sponsored by the Ubercart project.  http://www.ubercart.org
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_credit_menu($may_cache) {
  if ($may_cache) {
    $items[] = array(
      'path' => 'cart/checkout/credit/cvv_info',
      'title' => t('CVV information'),
      'callback' => 'uc_credit_cvv_info',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'admin/store/settings/payment/cc_encrypt',
      'title' => t('Encrypt existing credit card data'),
      'callback' => 'uc_credit_encrypt_existing',
      'access' => user_access('administer credit cards'),
      'type' => MENU_CALLBACK,
    );
  }
  else {
    if (is_numeric(arg(3))) {
      $items[] = array(
        'path' => 'admin/store/orders/'. arg(3) .'/credit',
        'title' => t('Credit card terminal: Order !order_id', array('!order_id' => arg(3))),
        'description' => t('Process a credit card payment for order !order_id.',
                           array('!order_id' => arg(3))),
        'callback' => 'uc_credit_terminal',
        'callback arguments' => array(arg(3)),
        'access' => user_access('process credit cards'),
        'type' => MENU_CALLBACK
      );
    }
  }

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function uc_credit_perm() {
  return array('administer credit cards', 'view cc details', 'view cc numbers', 'process credit cards');
}

/**
 * Implementation of hook_form_alter().
 */
function uc_credit_form_alter($form_id, &$form) {
  if ($form_id == 'uc_payment_methods_form') {
    $form['#validate']['uc_credit_settings_form_validate'] = array();
    $form['#submit']['uc_credit_settings_form_submit'] = array();
  }
}

/**
 * Implementation of hook_cron().
 */
function uc_credit_cron() {
  // Empty anonymous carts.
  $time = strtotime(variable_get('uc_cart_anon_duration', '4') .' '
                  . variable_get('uc_cart_anon_unit', 'hours') .' ago');
  db_query("DELETE upc.* FROM {uc_orders} AS uo LEFT JOIN {uc_payment_credit} "
          ."AS upc ON uo.order_id = upc.order_id WHERE uo.modified <= %d AND "
          ."uo.order_status = '%s'", $time, uc_order_state_default('in_checkout'));

  // Mask old stored credit card numbers.
  $time = strtotime(variable_get('uc_credit_number_duration', '1') .' '
                  . variable_get('uc_credit_number_unit', 'years') .' ago');
  db_query("DELETE upc.* FROM {uc_orders} AS uo LEFT JOIN {uc_payment_credit} "
          ."AS upc ON uo.order_id = upc.order_id WHERE uo.modified <= %d AND "
          ."uo.order_status = '%s'", $time,
           variable_get('uc_credit_clear_status', uc_order_state_default('completed')));
}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_order().
 */
function uc_credit_order($op, &$arg1, $arg2) {
  if ($op == 'save' || $op == 'load') {
    $key = uc_credit_encryption_key();
  }

  switch ($op) {
    case 'submit':
      if ($arg1->payment_method == 'credit'
       && variable_get('uc_credit_checkout_process', FALSE)) {
        $pass = uc_payment_process('credit', $arg1->order_id, $arg1->order_total, NULL, TRUE, NULL, FALSE);
        if (!$pass) {
          $message = variable_get('uc_credit_fail_message', t('We were unable to process your credit card payment. Please verify your card details and try again.  If the problem persists, contact us to complete your order.'));
          return array(array('pass' => FALSE, 'message' => $message));
        }
        if (variable_get('uc_credit_checkout_no_store', FALSE)) {
          db_query("DELETE FROM {uc_payment_credit} WHERE order_id = %d", $arg1->order_id);
        }
      }
      break;

    case 'save':
      if ($arg1->payment_method == 'credit') {
        $cc_type = $arg1->payment_details['cc_type'];
        $cc_owner = $arg1->payment_details['cc_owner'];
        if (substr($arg1->payment_details['cc_number'], 0, strlen(t('(Last 4) '))) == t('(Last 4) ')) {
          $cc_number = db_result(db_query("SELECT cc_number FROM {uc_payment_credit} WHERE order_id = %d", $arg1->order_id));
        }
        else {
          $cc_number = $arg1->payment_details['cc_number'];
        }
        $cc_exp_month = $arg1->payment_details['cc_exp_month'];
        $cc_exp_year = $arg1->payment_details['cc_exp_year'];
        $cc_cvv = $arg1->payment_details['cc_cvv'];
        $cc_bank = $arg1->payment_details['cc_bank'];

        if ($key !== FALSE) {
          $crypt = new uc_encryption_class;
          $cc_type = $crypt->encrypt($key, $cc_type);
          $cc_owner = $crypt->encrypt($key, $cc_owner);
          $cc_number = $crypt->encrypt($key, $cc_number, 32);
          $cc_exp_month = $crypt->encrypt($key, $cc_exp_month, 32);
          $cc_exp_year = $crypt->encrypt($key, $cc_exp_year, 32);
          $cc_cvv = $crypt->encrypt($key, $cc_cvv, 32);
          $cc_bank = $crypt->encrypt($key, $cc_bank);
        }

        db_query("UPDATE {uc_payment_credit} SET cc_type = '%s', cc_owner = '%s', "
                ."cc_number = '%s', cc_exp_month = '%s', cc_exp_year = '%s', "
                ."cc_cvv = '%s', cc_bank = '%s' WHERE order_id = %d", $cc_type,
                 $cc_owner, $cc_number, $cc_exp_month, $cc_exp_year, $cc_cvv,
                 $cc_bank, $arg1->order_id);
        if (db_affected_rows() == 0) {
          db_query("INSERT INTO {uc_payment_credit} (credit_id, order_id, "
                  ."cc_type, cc_owner, cc_number, cc_exp_month, cc_exp_year, "
                  ."cc_cvv, cc_bank) VALUES (%d, %d, '%s', '%s', '%s', '%s', "
                  ."'%s', '%s', '%s')", db_next_id('{uc_payment_credit}_credit_id'),
                   $arg1->order_id, $cc_type, $cc_owner, $cc_number,
                   $cc_exp_month, $cc_exp_year, $cc_cvv, $cc_bank);
        }
      }
      break;

    case 'load':
      if ($arg1->payment_method == 'credit') {
        $result = db_query("SELECT * FROM {uc_payment_credit} WHERE order_id = %d", $arg1->order_id);
        if ($data = db_fetch_object($result)) {
          if ($key !== FALSE) {
            $crypt = new uc_encryption_class;
            $arg1->payment_details['cc_type'] = $crypt->decrypt($key, $data->cc_type);
            $arg1->payment_details['cc_owner'] = $crypt->decrypt($key, $data->cc_owner);
            $arg1->payment_details['cc_number'] = $crypt->decrypt($key, $data->cc_number);
            $arg1->payment_details['cc_exp_month'] = $crypt->decrypt($key, $data->cc_exp_month);
            $arg1->payment_details['cc_exp_year'] = $crypt->decrypt($key, $data->cc_exp_year);
            $arg1->payment_details['cc_cvv'] = $crypt->decrypt($key, $data->cc_cvv);
            $arg1->payment_details['cc_bank'] = $crypt->decrypt($key, $data->cc_bank);
          }
          else {
            $arg1->payment_details['cc_type'] = $data->cc_type;
            $arg1->payment_details['cc_owner'] = $data->cc_owner;
            $arg1->payment_details['cc_number'] = $data->cc_number;
            $arg1->payment_details['cc_exp_month'] = $data->cc_exp_month;
            $arg1->payment_details['cc_exp_year'] = $data->cc_exp_year;
            $arg1->payment_details['cc_cvv'] = $data->cc_cvv;
            $arg1->payment_details['cc_bank'] = $data->cc_bank;
          }
        }
      }
      break;

    case 'delete':
      db_query("DELETE FROM {uc_payment_credit} WHERE order_id = %d", $arg1->order_id);
      break;
  }
}

/**
 * Implementation of hook_payment_method().
 */
function uc_credit_payment_method() {
  $path = base_path() . drupal_get_path('module', 'uc_credit');
  $title = t('Credit card:');
  $cc_types = array('visa', 'mastercard', 'discover', 'amex');
  foreach ($cc_types as $type) {
    if (variable_get('uc_credit_'. $type, TRUE)) {
      $title .= ' <img src="'. $path .'/images/'. $type .'.gif" style="position: relative; top: 5px;">';
    }
  }
  $methods[] = array(
    'id' => 'credit',
    'name' => t('Credit card'),
    'title' => $title,
    'desc' => t('Pay by credit card.'),
    'callback' => 'uc_payment_method_credit',
    'weight' => 2,
    'checkout' => TRUE,
  );

  return $methods;
}


/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Display the contents of the CVV information popup window.
 */
function uc_credit_cvv_info() {
  $output = '<b>'. t('What is the CVV?') .'</b><p>'. t('CVV stands for Card Verification Value. This number is used as a security feature to protect you from credit card fraud.  Finding the number on your card is a very simple process.  Just follow the directions below.') .'</p>';
  $cc_types = array('visa', 'mastercard', 'discover');
  foreach ($cc_types as $type) {
    if (variable_get('uc_credit_'. $type, TRUE)) {
      $valid_types[] = ucfirst($type);
    }
  }
  if (count($valid_types) > 0) {
    $output .= '<br /><b>'. implode(', ', $valid_types) .':</b><p><img src="'
             . base_path() . drupal_get_path('module', 'uc_credit')
              .'/images/visa_cvv.jpg" align="left" />'
            . t('The CVV for these cards is found on the back side of the card.  It is only the last three digits on the far right of the signature panel box.') .'</p>';
  }

  if (variable_get('uc_credit_amex', TRUE)) {
    $output .= '<br /><p><b>'. t('American Express') .':</b><p><img src="'
             . base_path() . drupal_get_path('module', 'uc_credit')
              .'/images/amex_cvv.jpg" align="left" />'
             . t('The CVV on American Express cards is found on the front of the card.  It is a four digit number printed in smaller text on the right side above the credit card number.') .'</p>';
  }

  $output .= '<p><div align="right"><input type="button" onclick="self.close();" '
            .'value="'. t('Close this window') .'" /></div></p>';

  print $output;
  exit();
}

function uc_payment_method_credit($op, &$arg1) {
  switch ($op) {
    case 'cart-details':
      $details = drupal_get_form('uc_payment_method_credit_form', $arg1);
      return uc_strip_form($details);

    case 'cart-process':
      $arg1->payment_details['cc_type'] = check_plain($_POST['cc_type']);
      $arg1->payment_details['cc_owner'] = check_plain($_POST['cc_owner']);
      if (substr($_POST['cc_number'], 0, strlen(t('(Last 4) '))) == t('(Last 4) ')) {
        $result = db_query("SELECT cc_number FROM {uc_payment_credit} WHERE order_id = %d", $arg1->order_id);
        if ($number = db_result($result)) {
          $arg1->payment_details['cc_number'] = $number;
        }
        else {
          $arg1->payment_details['cc_number'] = '';
        }
      }
      else {
        $arg1->payment_details['cc_number'] = check_plain($_POST['cc_number']);
      }
      $arg1->payment_details['cc_exp_month'] = check_plain($_POST['cc_exp_month']);
      $arg1->payment_details['cc_exp_year'] = check_plain($_POST['cc_exp_year']);
      $arg1->payment_details['cc_cvv'] = check_plain($_POST['cc_cvv']);
      $arg1->payment_details['cc_bank'] = check_plain($_POST['cc_bank']);

      $return = TRUE;
      if (variable_get('uc_credit_owner_enabled', FALSE) && empty($_POST['cc_owner'])) {
        drupal_set_message(t('Enter the owner name as it appears on the card.'), 'error');
        $return = FALSE;
      }
      if (variable_get('uc_credit_cvv_enabled', TRUE) && !_valid_cvv($_POST['cc_cvv'])) {
        drupal_set_message(t('You have entered an invalid CVV number.'), 'error');
        $return = FALSE;
      }
      if (variable_get('uc_credit_bank_enabled', FALSE) && empty($_POST['cc_bank'])) {
        drupal_set_message(t('You must enter the issuing bank for that card.'), 'error');
        $return = FALSE;
      }
      if (variable_get('uc_credit_validate_numbers', TRUE) && !_valid_card_number($arg1->payment_details['cc_number'])) {
        drupal_set_message(t('You have entered an invalid credit card number.'), 'error');
        $return = FALSE;
      }
      return $return;

    case 'cart-review':
      if (variable_get('uc_credit_type_enabled', FALSE)) {
        $review[] = array('title' => t('Card Type'), 'data' => $arg1->payment_details['cc_type']);
      }
      if (variable_get('uc_credit_owner_enabled', FALSE)) {
        $review[] = array('title' => t('Card Owner'), 'data' => $arg1->payment_details['cc_owner']);
      }
      $review[] = array('title' => t('Card Number'), 'data' => uc_credit_display_number($arg1->payment_details['cc_number']));
      $review[] = array('title' => t('Expiration'), 'data' => $arg1->payment_details['cc_exp_month'] .'/'. $arg1->payment_details['cc_exp_year']);
      if (variable_get('uc_credit_cvv_enabled', TRUE)) {
        $review[] = array('title' => t('CVV'), 'data' => $arg1->payment_details['cc_cvv']);
      }
      if (variable_get('uc_credit_bank_enabled', FALSE)) {
        $review[] = array('title' => t('Issuing Bank'), 'data' => $arg1->payment_details['cc_bank']);
      }
      return $review;

    case 'order-view':
      drupal_add_js(drupal_get_path('module', 'uc_credit') .'/uc_credit.js');
      $output .= '<span onclick="toggle_card_details();" style="cursor: pointer;">'
                .'<a id="cc_details_title" href="" onclick="return false;" '
                .'style="display: none;">View card details.</a>';
      $output .= '<span id="cc_details"><table style="width: auto;">';
      if (variable_get('uc_credit_type_enabled', TRUE)) {
        $output .= '<tr><td>'. t('Card Type:') .' </td><td>'
                 . $arg1->payment_details['cc_type'] .'</td></tr>';
      }
      if (variable_get('uc_credit_owner_enabled', FALSE)) {
        $output .= '<tr><td>'. t('Card Owner:') .' </td><td>'
                 . $arg1->payment_details['cc_owner'] .'</td></tr>';
      }
      $output .= '<tr><td>'. t('Card Number:') .' </td><td>'
               . uc_credit_display_number($arg1->payment_details['cc_number']) .'</td></tr>';
      $output .= '<tr><td>'. t('Expiration:') .' </td><td>'
               . $arg1->payment_details['cc_exp_month'] .'/'
               . $arg1->payment_details['cc_exp_year'] .'</td></tr>';
      if (variable_get('uc_credit_cvv_enabled', TRUE)) {
        $output .= '<tr><td>'. t('CVV:') .' </td><td>'
                 . $arg1->payment_details['cc_cvv'] .'</td></tr>';
      }
      if (variable_get('uc_credit_bank_enabled', TRUE)) {
        $output .= '<tr><td>'. t('Issuing Bank:') .' </td><td>'
                 . $arg1->payment_details['cc_bank'] .'</td></tr>';
      }
      $output .= '</table></span></span>';
      if (user_access('process credit cards') &&
          is_numeric($arg1->payment_details['cc_number']) &&
          strlen($arg1->payment_details['cc_number']) > 10) {
        $output .= drupal_get_form('uc_credit_order_view_form', $arg1->order_id);
      }
      return $output;

    case 'customer-view':
      $output = t('Card Number:') .'<br />'
              . uc_credit_display_number($arg1->payment_details['cc_number'], TRUE);
      return $output;

    case 'order-details':
      $details = drupal_get_form('uc_payment_method_credit_form', $arg1);
      return uc_strip_form($details);

    case 'edit-process':
      $changes['payment_details']['cc_type'] = check_plain($_POST['cc_type']);
      $changes['payment_details']['cc_owner'] = check_plain($_POST['cc_owner']);
      if (substr($_POST['cc_number'], 0, 10) !== t('(Last 4) ')) {
        $changes['payment_details']['cc_number'] = check_plain($_POST['cc_number']);
      }
      $changes['payment_details']['cc_exp_month'] = check_plain($_POST['cc_exp_month']);
      $changes['payment_details']['cc_exp_year'] = check_plain($_POST['cc_exp_year']);
      $changes['payment_details']['cc_cvv'] = check_plain($_POST['cc_cvv']);
      $changes['payment_details']['cc_bank'] = check_plain($_POST['cc_bank']);
      return $changes;

    case 'settings':
      if (!user_access('administer credit cards')) {
        $form['notice'] = array(
          '#value' => '<div>'. t('You must have access to <b>administer credit cards</b> to adjust these settings.') .'</div>',
        );
        return $form;
      }

      // Form elements that deal with the type of data requested at checkout.
      $form['cc_fields'] = array(
        '#type' => 'fieldset',
        '#title' => t('Credit card fields'),
        '#description' => t('Specify what information to collect from customers in addition to the card number.'),
        '#collapsible' => FALSE,
      );
      $form['cc_fields']['uc_credit_cvv_enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable CVV text field on checkout form.'),
        '#description' => t('The CVV is an added security measure on credit cards. On Visa, Mastercard, and Discover cards it is a three digit number, and on AmEx cards it is a four digit number. If your credit card processor or payment gateway requires this information, you should enable this feature here.'),
        '#default_value' => variable_get('uc_credit_cvv_enabled', TRUE),
      );
      $form['cc_fields']['uc_credit_owner_enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable card owner text field on checkout form.'),
        '#default_value' => variable_get('uc_credit_owner_enabled', FALSE),
      );
      $form['cc_fields']['uc_credit_bank_enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable issuing bank text field on checkout form.'),
        '#default_value' => variable_get('uc_credit_bank_enabled', FALSE),
      );
      $form['cc_fields']['uc_credit_type_enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable card type selection on checkout form.'),
        '#description' => t('If enabled, specify in the textarea below which card options to populate the select box with.'),
        '#default_value' => variable_get('uc_credit_type_enabled', FALSE),
      );

      // From elements that deal with card types accepted.
      $form['cc_types'] = array(
        '#type' => 'fieldset',
        '#title' => t('Accepted card types'),
        '#description' => t('Use the checkboxes to specify which card types you accept for payment. Selected card types will show their icons in the payment method selection list and be used for card number validation. The text area is used in conjunction with the card type select box only.'),
      );
      $form['cc_types']['uc_credit_visa'] = array(
        '#type' => 'checkbox',
        '#title' => t('Visa'),
        '#default_value' => variable_get('uc_credit_visa', TRUE),
      );
      $form['cc_types']['uc_credit_mastercard'] = array(
        '#type' => 'checkbox',
        '#title' => t('Mastercard'),
        '#default_value' => variable_get('uc_credit_mastercard', TRUE),
      );
      $form['cc_types']['uc_credit_discover'] = array(
        '#type' => 'checkbox',
        '#title' => t('Discover'),
        '#default_value' => variable_get('uc_credit_discover', TRUE),
      );
      $form['cc_types']['uc_credit_amex'] = array(
        '#type' => 'checkbox',
        '#title' => t('American Express'),
        '#default_value' => variable_get('uc_credit_amex', TRUE),
      );
      $form['cc_types']['uc_credit_accepted_types'] = array(
        '#type' => 'textarea',
        '#title' => t('Card type select box options'),
        '#description' => t('Enter one card type per line. The select box at checkout uses these options regardless of your choices above.'),
        '#default_value' => variable_get('uc_credit_accepted_types', implode("\r\n", array(t('Visa'), t('Mastercard'), t('Discover'), t('American Express')))),
      );


      // Form elements that deal with credit card messages to customers.
      $form['cc_messages'] = array(
        '#type' => 'fieldset',
        '#title' => t('Customer messages'),
        '#description' => t('Here you can alter messages displayed to customers using credit cards.'),
        '#collapsible' => FALSE,
      );
      $form['cc_messages']['uc_credit_policy'] = array(
        '#type' => 'textarea',
        '#title' => t('Credit card payment policy'),
        '#description' => t('Instructions for customers on the checkout page above the credit card fields.'),
        '#default_value' => variable_get('uc_credit_policy', t('Your billing information must match the billing address for the credit card entered below or we will be unable to process your payment.')),
        '#rows' => 3,
      );
      $form['cc_messages']['uc_credit_fail_message'] = array(
        '#type' => 'textarea',
        '#title' => t('Card processing failure message'),
        '#description' => t('Error message displayed to customers when an attempted payment fails at checkout.'),
        '#default_value' => variable_get('uc_credit_fail_message', t('We were unable to process your credit card payment. Please verify your card details and try again.  If the problem persists, contact us to complete your order.')),
      );

      // Form elements that deal with the credit card workflow during checkout.
      $form['cc_workflow'] = array(
        '#type' => 'fieldset',
        '#title' => t('Checkout workflow'),
        '#description' => t('These settings alter the way credit card data is collected and used during checkout.'),
        '#collapsible' => FALSE,
      );
      $form['cc_workflow']['uc_credit_validate_numbers'] = array(
        '#type' => 'checkbox',
        '#title' => t('Validate credit card numbers at checkout.'),
        '#description' => t('Invalid card numbers will prevent checkout completion.'),
        '#default_value' => variable_get('uc_credit_validate_numbers', TRUE),
      );
      $form['cc_workflow']['uc_credit_checkout_process'] = array(
        '#type' => 'checkbox',
        '#title' => t('Attempt to process credit card payments at checkout.'),
        '#description' => t('Failed attempts will prevent checkout completion and display the error message from above.'),
        '#default_value' => variable_get('uc_credit_checkout_process', FALSE),
      );

      // Form elements that deal specifically with card number security.
      $form['cc_security'] = array(
        '#type' => 'fieldset',
        '#title' => t('Credit card data security'),
        '#description' => t('You are responsible for the security of your website, including the protection of credit card numbers.  Please be aware that choosing some settings in this section may decrease the security of credit card data on your website and increase your liability for damages in the case of fraud.'),
        '#collapsible' => FALSE,
      );
      $form['cc_security']['uc_credit_checkout_no_store'] = array(
        '#type' => 'checkbox',
        '#title' => t('Do not store the full credit card number even at checkout.'),
        '#default_value' => variable_get('uc_credit_checkout_no_store', FALSE),
        '#description' => t('This setting may not be possible for some payment setups or stores that cannot process cards during checkout.<br />If at all possible, you should use this setting.'),
      );
      $form['cc_security']['uc_credit_encryption_path'] = array(
        '#type' => 'textfield',
        '#title' => t('Card number encryption key filepath'),
        '#description' => t('Credit card numbers may be encrypted if you follow the <a href="!url">encryption instructions</a>.<br />Relative paths will be resolved relative to the Drupal installation directory.', array('!url' => 'http://www.ubercart.org/docs/user/2731/credit_card_settings#security')),
        '#default_value' => variable_get('uc_credit_encryption_path', t('Not configured, see below.')),
      );
      $form['cc_security']['uc_credit_masking'] = array(
        '#type' => 'checkbox',
        '#title' => t('Mask credit card numbers by not displaying the full number on the site or in invoices.'),
        '#default_value' => variable_get('uc_credit_masking', TRUE),
      );
      $form['cc_security']['uc_credit_masking_char'] = array(
        '#type' => 'textfield',
        '#title' => t('Masking character'),
        '#description' => t('The character used to mask a card number.'),
        '#default_value' => variable_get('uc_credit_masking_char', '-'),
        '#size' => 10,
        '#maxlength' => 1,
      );

      // Form elements to handle the automatic clearing of card data.
      $form['cc_clear'] = array(
        '#type' => 'fieldset',
        '#title' => t('Stored data clearing'),
        '#description' => t('Specify below the status and age of orders whose credit card details will be removed from the database. Card details for orders in checkout are deleted after the anonymous cart duration specified in the <a href="!url">cart settings</a> has passed in addition to the settings here.', array('!url' => url('admin/store/settings/cart/edit'))),
        '#collapsible' => FALSE,
      );
      foreach (uc_order_status_list() as $status) {
        $options[$status['id']] = $status['title'];
      }
      $form['cc_clear']['uc_credit_clear_status'] = array(
        '#type' => 'select',
        '#title' => t('Order status'),
        '#options' => $options,
        '#default_value' => variable_get('uc_credit_clear_status', uc_order_state_default('completed')),
        '#prefix' => '<div style="float: left; margin-right: 1em;">',
        '#suffix' => '</div>',
      );
      $form['cc_clear']['uc_credit_number_duration'] = array(
        '#type' => 'select',
        '#title' => t('Age'),
        '#options' => drupal_map_assoc(range(1, 24)),
        '#default_value' => variable_get('uc_credit_number_duration', '1'),
        '#prefix' => '<div style="float: left; margin-right: 1em;">',
        '#suffix' => '</div>',
      );
      $form['cc_clear']['uc_credit_number_unit'] = array(
        '#type' => 'select',
        '#title' => t('Unit of time'),
        '#options' => array(
          'hours' => t('hour(s)'),
          'days' => t('day(s)'),
          'weeks' => t('week(s)'),
          'years' => t('year(s)'),
        ),
        '#default_value' => variable_get('uc_credit_number_unit', 'years'),
        '#prefix' => '<div style="float: left;">',
        '#suffix' => '</div>',
      );

      return $form;
  }
}

// Makes sure the encryption key directory in the credit card settings is valid.
function uc_credit_settings_form_validate($form_id, $form_values) {
  if ($form_values['uc_credit_encryption_path'] !==
      variable_get('uc_credit_encryption_path', t('Not configured, see below.'))) {
    $dir = rtrim($form_values['uc_credit_encryption_path'], '/\\');

    $_SESSION['update_cc_encrypt_dir'] = TRUE;
    if (!empty($dir) && $dir !== t('Not configured, see below.')) {
      if (!is_dir($dir)) {
        form_set_error('uc_credit_encryption_path', t('You have specified a non-existent directory.'));
        unset($_SESSION['update_cc_encrypt_dir']);
      }
      else {
        $file = fopen($dir .'/encrypt.test', 'w');
        if ($file === FALSE) {
          form_set_error('uc_credit_encryption_path', t('Cannot write to directory, please verify the directory permissions.'));
          unset($_SESSION['update_cc_encrypt_dir']);
        }
        else {
          if (fwrite($file, '0123456789') === FALSE) {
            form_set_error('uc_credit_encryption_path', t('Cannot write to directory, please verify the directory permissions.'));
            unset($_SESSION['update_cc_encrypt_dir']);
            fclose($file);
          }
          else {
            fclose($file);
            $file = fopen($dir .'/encrypt.test', 'r');
            if ($file === FALSE) {
              form_set_error('uc_credit_encryption_path', t('Cannot read from directory, please verify the directory permissions.'));
              unset($_SESSION['update_cc_encrypt_dir']);
            }
            fclose($file);
          }
          unlink($dir .'/encrypt.test');
        }
      }
    }
  }
}

// Creates the encryption key file if it doesn't already exist.
function uc_credit_settings_form_submit($form_id, $form_values) {
  if ($_SESSION['update_cc_encrypt_dir'] === TRUE) {
    $dir = rtrim($form_values['uc_credit_encryption_path'], '/\\');
  
    if (!empty($dir) && $dir !== t('Not configured, see below.')) {
      if (!file_exists($dir .'/uc_credit.key')) {
        if (!$file = fopen($dir .'/uc_credit.key', 'wb')) {
          $message = t('Credit card encryption key file creation failed. Check your filepath settings and directory permissions.');
          drupal_set_message($message, 'error');
          watchdog('uc_credit', $message, WATCHDOG_ERROR);
        }
        else {
          fwrite($file, md5(time()));
          fclose($file);
      
          $message = t('Credit card encryption key file generated. Card data will now be encrypted.');
          drupal_set_message($message);
          drupal_set_message(t('Warning: If you have any pre-existing credit card data, you must <a href="!url">click here</a> to encrypt it before receiving any more credit card orders or the data may be lost.', array('!url' => url('admin/store/settings/payment/cc_encrypt'))), 'error');
          watchdog('uc_credit', t('Credit card encryption key file generated.'));
        }
      }
    }
  }
}

/**
 * Credit card details form on the checkout screen.
 */
function uc_payment_method_credit_form($order) {
  $form['cc_policy'] = array('#value' => variable_get('uc_credit_policy', t('Your billing information must match the billing address for the credit card entered below or we will be unable to process your payment.')));
  if (variable_get('uc_credit_type_enabled', FALSE)) {
    $types = variable_get('uc_credit_accepted_types', implode("\r\n", array(t('Visa'), t('Mastercard'), t('Discover'), t('American Express'))));
    if (empty($types)) {
      $types = array(t('N/A'));
    }
    else {
      $types = explode("\r\n", $types);
    }
    foreach ($types as $type) {
      $options[check_plain($type)] = $type;
    }
    $form['cc_type'] = array(
      '#type' => 'select',
      '#title' => t('Card type'),
      '#options' => $options,
      '#default_value' => $order->payment_details['cc_type'],
    );
  }
  if (variable_get('uc_credit_owner_enabled', FALSE)) {
    $form['cc_owner'] = array(
      '#type' => 'textfield',
      '#title' => t('Card owner'),
      '#default_value' => $order->payment_details['cc_owner'],
      '#attributes' => array('autocomplete' => 'off'),
      '#size' => 32,
      '#maxlength' => 64,
    );
  }
  if (variable_get('uc_credit_validate_numbers', TRUE) &&
      (strlen($order->payment_details['cc_number']) > 4 &&
       !_valid_card_number($order->payment_details['cc_number']))) {
    $default_num = $order->payment_details['cc_number'];
  }
  elseif (!empty($order->payment_details['cc_number'])) {
    if (user_access('view cc numbers')) {
      $default_num = $order->payment_details['cc_number'];
    }
    else {
      $default_num = t('(Last 4) ') . substr($order->payment_details['cc_number'], -4);
    }
  }
  $form['cc_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Card number'),
    '#default_value' => $default_num,
    '#attributes' => array('autocomplete' => 'off'),
    '#size' => 20,
    '#maxlength' => 16,
  );
  $form['cc_exp_month'] = uc_select_month(t('Expiration Month'), $order->payment_details['cc_exp_month']);
  $form['cc_exp_year'] = uc_select_year(t('Expiration Year'), $order->payment_details['cc_exp_year']);
  if (variable_get('uc_credit_cvv_enabled', TRUE)) {
    $cvv_length = variable_get('uc_credit_amex', TRUE) ? 4 : 3;
    $form['cc_cvv'] = array(
      '#type' => 'textfield',
      '#title' => t('CVV'),
      '#default_value' => $order->payment_details['cc_cvv'],
      '#attributes' => array('autocomplete' => 'off'),
      '#size' => $cvv_length,
      '#maxlength' => $cvv_length,
    );
  }
  if (variable_get('uc_credit_bank_enabled', FALSE)) {
    $form['cc_bank'] = array(
      '#type' => 'textfield',
      '#title' => t('Issuing bank'),
      '#default_value' => $order->payment_details['cc_bank'],
      '#attributes' => array('autocomplete' => 'off'),
      '#size' => 32,
      '#maxlength' => 64,
    );
  }

  return $form;
}

function theme_uc_payment_method_credit_form($form) {
  // Comment out this function to just straight display the form.
  $form['cc_number']['#title'] = '';
  $form['cc_exp_month']['#title'] = '';
  $form['cc_exp_year']['#title'] = '';

  if (arg(1) == 'checkout') {
    $path = base_path() . drupal_get_path('module', 'uc_credit');
    $output = '<table class="inline-pane-table" cellpadding="2">';
    if (strlen($form['cc_policy']) > 0) {
      $output .= '<tr><td colspan="2">'. variable_get('uc_credit_policy', '')
                .'</td></tr>';
    }
    if (variable_get('uc_credit_type_enabled', FALSE)) {
      $form['cc_type']['#title'] = '';
      $output .= '<tr><td class="field-label">'. t('Card Type:') .'</td><td>'
               . drupal_render($form['cc_type']) .'</td></tr>';
    }
    if (variable_get('uc_credit_owner_enabled', FALSE)) {
      $form['cc_owner']['#title'] = '';
      $output .= '<tr><td class="field-label">'. t('Card Owner:') .'</td><td>'
               . drupal_render($form['cc_owner']) .'</td></tr>';
    }
    $output .= '<tr><td class="field-label">'. t('Card Number:') .'</td><td>'
             . drupal_render($form['cc_number']) .'</td></tr>';
    $output .= '<tr><td class="field-label">'. t('Expiration Date:') .'</td><td>'
             . drupal_render($form['cc_exp_month']) .' '
             . drupal_render($form['cc_exp_year']) .'</td></tr>';
    if (variable_get('uc_credit_cvv_enabled', TRUE)) {
      $form['cc_cvv']['#title'] = '';
      $output .= '<tr><td class="field-label">'. t('CVV:') .'</td><td>'. drupal_render($form['cc_cvv'])
                .' <img src="'. $path .'/images/info.png" onclick="cvv_info_popup();" style="cursor: pointer; position: relative; top: 3px;"> <a style="cursor: pointer; font-weight: normal;" onclick="cvv_info_popup();">'
                . t("What's the CVV?") .'</a></td></tr>';
    }
    if (variable_get('uc_credit_bank_enabled', FALSE)) {
      $form['cc_bank']['#title'] = '';
      $output .= '<tr><td class="field-label">'. t('Issuing Bank:') .'</td><td>'
               . drupal_render($form['cc_bank']) .'</td></tr>';
    }
    $output .= '</table>';
  }
  elseif (arg(2) == 'orders') {
    $output = '<table class="order-edit-table">';
    if (variable_get('uc_credit_type_enabled', FALSE)) {
      $form['cc_type']['#title'] = '';
      $output .= '<tr><td class="oet-label">'. t('Card Type:') .'</td><td>'
               . drupal_render($form['cc_type']) .'</td></tr>';
    }
    if (variable_get('uc_credit_owner_enabled', FALSE)) {
      $form['cc_owner']['#title'] = '';
      $output .= '<tr><td class="oet-label">'. t('Card Owner:') .'</td><td>'
               . drupal_render($form['cc_owner']) .'</td></tr>';
    }
    $output .= '<tr><td class="oet-label">'. t('Card Number:') .'</td><td>'
             . drupal_render($form['cc_number']) .'</td></tr>';
    $output .= '<tr><td class="oet-label">'. t('Expiration Date:') .'</td><td>'
             . drupal_render($form['cc_exp_month']) .' '
             . drupal_render($form['cc_exp_year']) .'</td></tr>';
    if (variable_get('uc_credit_cvv_enabled', TRUE)) {
      $form['cc_cvv']['#title'] = '';
      $output .= '<tr><td class="oet-label">'. t('CVV:') .'</td><td>'
               . drupal_render($form['cc_cvv']) .'</td></tr>';
    }
    if (variable_get('uc_credit_bank_enabled', FALSE)) {
      $form['cc_bank']['#title'] = '';
      $output .= '<tr><td class="oet-label">'. t('Issuing Bank:') .'</td><td>'
               . drupal_render($form['cc_bank']) .'</td></tr>';
    }
    $output .= '</td></tr></table>';
  }

  return $output;
}

/**
 * The "Process Card" button on the order view.
 */
function uc_credit_order_view_form($order_id) {
  $form['order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Process card'),
  );
  return $form;
}

function uc_credit_order_view_form_submit($form_id, $form_values) {
  drupal_goto('admin/store/orders/'. $form_values['order_id'] .'/credit');
}

/**
 * View the credit card terminal page.
 */
function uc_credit_terminal($order_id) {
  $order = uc_order_load($order_id);

  if ($order === FALSE) {
    drupal_set_message(t('Order !order_id does not exist.', array('!order_id' => $order_id)));
    drupal_goto('admin/store/orders');
  }

  $output = l(t('Return to order view screen.'), 'admin/store/orders/'. $order_id);

  $balance = uc_payment_balance($order);
  $output .= '<p>'. t('Use this terminal to process credit card payments:') .'</p>'
            .'<table><tbody style="border-top: 0px;"><tr><td><strong>'
           . t('Order total:') .'</strong> </td><td>'
           . uc_currency_format($order->order_total) .'</td></tr><tr><td>'
            .'<strong>'. t('Balance:') .'</strong> </td><td>'
           . uc_currency_format($balance) .'</td></tr></tbody></table>';

  $output .= '<br /><p><strong>'. t('Credit card details:') .'</strong><table>';
  if (variable_get('uc_credit_owner_enabled', FALSE)) {
    $output .= '<tbody style="border-top: 0px;"><tr><td>'. t('Card Owner:')
              .' </td><td>'. $order->payment_details['cc_owner'] .'</td></tr>';
  }
  $output .= '<tr><td>'. t('Card number:') .' </td><td>'
           . uc_credit_display_number($order->payment_details['cc_number'])
            .'</td></tr><tr><td>'. t('Expiration:') .' </td><td>'
           . $order->payment_details['cc_exp_month'] .'/'
           . $order->payment_details['cc_exp_year'] .'</td></tr>';
  if (variable_get('uc_credit_cvv_enabled', TRUE)) {
    $output .= '<tr><td>'. t('CVV:') .' </td><td>'
             . $order->payment_details['cc_cvv'] .'</td></tr>';
  }
  $output .= '</tbody></table></p>';

  $output .= drupal_get_form('uc_credit_terminal_form', $order_id, $balance);

  return $output;
}

function uc_credit_terminal_form($order_id, $amount = 0) {
  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Charge Amount'),
    '#default_value' => uc_currency_format($amount, FALSE, FALSE),
    '#size' => 10,
    '#weight' => 0,
    '#field_prefix' => variable_get('uc_sign_after_amount', FALSE) ? '' : variable_get('uc_currency_sign', '$'),
    '#field_suffix' => variable_get('uc_sign_after_amount', FALSE) ? variable_get('uc_currency_sign', '$') : '',
  );
  $form['order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Charge card'),
    '#weight' => 10,
  );

  return $form;
}

function uc_credit_terminal_form_validate($form_id, $form_values) {
  if (!is_numeric($form_values['amount']) || $form_values['amount'] == 0) {
    form_set_error('amount', t('You must enter a number for the amount.'));
  }

  $order = uc_order_load($form_values['order_id']);
  if ($order === FALSE) {
    form_set_error('', t('Invalid order ID.  Unable to process payment.'));
  }
}

function uc_credit_terminal_form_submit($form_id, $form_values) {
  uc_payment_process('credit', $form_values['order_id'], $form_values['amount']);
}

/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

/**
 * Return a credit card number with appropriate masking.
 */
function uc_credit_display_number($number, $masked = FALSE) {
  if (strlen($number) == 4) {
    return t('(Last 4) '). $number;
  }

  if (user_access('view cc numbers') && !$masked) {
    return $number;
  }
  else {
    return str_repeat(variable_get('uc_credit_masking_char', '-'), 12) . substr($number, -4);
  }
}

// Give the option to site admin to encrypt existing CC data.
function uc_credit_encrypt_existing() {
  if (($key = uc_credit_encryption_key()) === FALSE) {
    return t('You must first setup your credit card encryption key filepath.');
  }

  if (variable_get('uc_credit_existing_cc_encrypted', FALSE)) {
    return t('This action may not be repeated.');
  }

  if (arg(5) !== 'process') {
    return t('Existing credit card numbers should be encrypted for future usage. The encryption process may take a few moments if you have a lot of data that needs to be encrypted. Click <a href="!url">this link</a> to update them now.', array('!url' => url('admin/store/settings/payment/cc_encrypt/process')));
  }
  else {
    $crypt = new uc_encryption_class;
    $result = db_query("SELECT * FROM {uc_payment_credit} WHERE cc_number REGEXP ('[0-9]')");
    while ($row = db_fetch_array($result)) {
      db_query("UPDATE {uc_payment_credit} SET cc_type = '%s', cc_owner = '%s', "
              ."cc_number = '%s', cc_exp_month = '%s', cc_exp_year = '%s', "
              ."cc_cvv = '%s', cc_bank = '%s' WHERE credit_id = %d", 
               $crypt->encrypt($key, $row['cc_type']),
               $crypt->encrypt($key, $row['cc_owner']),
               $crypt->encrypt($key, $row['cc_number'], 32),
               $crypt->encrypt($key, $row['cc_exp_month'], 32),
               $crypt->encrypt($key, $row['cc_exp_year'], 32),
               $crypt->encrypt($key, $row['cc_cvv'], 32),
               $crypt->encrypt($key, $row['cc_bank']),
               $row['credit_id']);
    }
    variable_set('uc_credit_existing_cc_encrypted', TRUE);
    drupal_set_message(t('Your existing credit card data has been encrypted.'));
    drupal_goto('admin/store/settings/payment/cc_encrypt');
  }
}

/**
 * Validate a CVV number during checkout.
 */
function _valid_cvv($cvv) {
  if (variable_get('uc_credit_visa', TRUE) ||
      variable_get('uc_credit_mastercard', TRUE) ||
      variable_get('uc_credit_discover', TRUE)) {
    $digits[] = 3;
  }
  if (variable_get('uc_credit_amex', TRUE)) {
    $digits[] = 4;
  }

  if (!in_array(strlen($cvv), $digits) || !is_numeric($cvv)) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Validate a credit card number during checkout.
 * See: http://www.merriampark.com/anatomycc.htm
 */
function _valid_card_number($number) {
  $id = substr($number, 0, 1);
  if (($id == 3 && !variable_get('uc_credit_amex', TRUE)) ||
      ($id == 4 && !variable_get('uc_credit_visa', TRUE)) ||
      ($id == 5 && !variable_get('uc_credit_mastercard', TRUE)) ||
      ($id == 6 && !variable_get('uc_credit_discover', TRUE)) ||
      !is_numeric($number)) {
    return FALSE;
  }

  for ($i = 0; $i < strlen($number); $i++) {
    $digit = substr($number, $i, 1);
    if ((strlen($number) - $i - 1) % 2) {
      $digit *= 2;
      if ($digit > 9) {
        $digit -= 9;
      }
    }
    $total += $digit;
  }

  if ($total % 10 != 0) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Returns either an array of options from a multi-line textarea or an array
 * condensed into a multi-line string depending on the type of $data.
 */
function _array_convert($data) {
  if (is_array($data)) {
    return implode("\n", $data);
  }
  elseif (is_string($data)) {
    return explode("\n", $data);
  }
  else {
    return NULL;
  }
}

/**
 * Loads the key for CC number encryption from a file.
 *
 * @return FALSE if no encryption key is found.
 */
function uc_credit_encryption_key() {
  static $key;

  if (!empty($key)) {
    return $key;
  }

  $dir = variable_get('uc_credit_encryption_path', t('Not configured, see below.'));

  if (!empty($dir) && $dir !== t('Not configured, see below.')) {
    $filename = rtrim($dir, '/\\') .'/uc_credit.key';

    if (file_exists($filename)) {
      if (!$file = fopen($filename, 'r')) {
        return FALSE;
      }

      $key = fread($file, filesize($filename));
      fclose($file);
    }
  }
  else {
    return FALSE;
  }

  return $key;
}

